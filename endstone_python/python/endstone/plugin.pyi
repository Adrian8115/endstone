from typing import Optional, List

from endstone.logger import Logger
from endstone.server import Server


class PluginLoader:
    def __init__(self, server: Server) -> None: ...
    def get_plugin_file_filters(self) -> list[str]: ...
    def load_plugin(self, file: str) -> Plugin: ...
    def enable_plugin(self, plugin: Plugin) -> None: ...
    def disable_plugin(self, plugin: Plugin) -> None: ...
    @property
    def server(self) -> Server: ...

class PluginDescription:
    def __init__(
        self,
        name: str,
        version: str,
        description: Optional[str] = None,
        authors: Optional[List[str]] = None,
        prefix: Optional[str] = None,
        *args,
        **kwargs
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def version(self) -> str: ...
    @property
    def full_name(self) -> str: ...
    @property
    def description(self) -> Optional[str]: ...
    @property
    def authors(self) -> Optional[List[str]]: ...
    @property
    def prefix(self) -> Optional[str]: ...

class Plugin:
    def __init__(self) -> None: ...
    def on_disable(self) -> None: ...
    def on_enable(self) -> None: ...
    def on_load(self) -> None: ...
    @property
    def description(self) -> PluginDescription: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def logger(self) -> Logger: ...
    @property
    def plugin_loader(self) -> PluginLoader: ...
    @property
    def server(self) -> Server: ...
